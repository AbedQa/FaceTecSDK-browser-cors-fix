SampleApp = (function () {
    var latestEnrollmentIdentifier = "";
    var latestProcessor;
    var latestSessionResult = null;
    var latestIDScanResult = null;
    var orangeAuthProcessor = null;
    var orangeAccessToken = null;
    var orangeSessionToken = null;
    // Wait for onload to be complete before attempting to access the Browser SDK.
    window.onload = function () {
        updateInitStatus("Setting up device interface...");
        SampleAppUtilities.formatUIForDevice();

        updateInitStatus("Loading FaceTec SDK resources...");
        // Set a the directory path for other FaceTec Browser SDK Resources.
        FaceTecSDK.setResourceDirectory("../../core-sdk/FaceTecSDK.js/resources");
        // Set the directory path for required FaceTec Browser SDK images.
        FaceTecSDK.setImagesDirectory("../../core-sdk/FaceTec_images");

        updateInitStatus("Initializing FaceTec SDK...");
        // Initialize FaceTec Browser SDK and configure the UI features.
        Config.initializeFromAutogeneratedConfig(FaceTecSDK, function (initializedSuccessfully) {
            if (initializedSuccessfully) {
                onFaceTecSDKInitializationSuccess();
            }
            else {
                onFaceTecSDKInitializationFailure();
            }
        });
        SampleAppUtilities.fadeInMainUIContainer();
    };
    function onFaceTecSDKInitializationSuccess() {
        updateInitStatus("Configuring UI and themes...");
        SampleAppUtilities.enableControlButtons();
        // Set your FaceTec Device SDK Customizations.
        ThemeHelpers.setAppTheme(ThemeHelpers.getCurrentTheme());
        // Set the sound files that are to be used for Vocal Guidance.
        SampleAppUtilities.setVocalGuidanceSoundFiles();
        // Set the strings to be used for group names, field names, and placeholder texts for the FaceTec ID Scan User OCR Confirmation Screen.
        SampleAppUtilities.setOCRLocalization();
        AdditionalScreens.setServerUpgradeStyling(document.getElementById("controls"), exitAdditionalScreen);
        DeveloperStatusMessages.logInitializeResult();

        updateInitStatus("Ready!");

        // Enable only Orange Authentication button initially
        enableOrangeAuthenticationOnly();

        // Hide initialization screen and show main interface
        setTimeout(function () {
            hideInitScreen();
        }, 1000);
    }
    function onFaceTecSDKInitializationFailure() {
        updateInitStatus("Initialization failed. Please refresh the page.");
        DeveloperStatusMessages.logInitializeResult();
        // Show error and allow user to continue anyway
        setTimeout(function () {
            hideInitScreen();
        }, 3000);
    }
    // Clear previous session results;
    function initializeResultObjects() {
        latestSessionResult = null;
        latestIDScanResult = null;
    }
    // Initiate a 3D Liveness Check.
    function onLivenessCheckPressed() {
        initializeResultObjects();
        SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
        // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.
        getSessionToken(function (sessionToken) {
            latestProcessor = new LivenessCheckProcessor(sessionToken, SampleApp);
        });
    }
    // Initiate a 3D Liveness Check, then storing the 3D FaceMap in the Database, also known as "Enrollment".  A random enrollmentIdentifier is generated each time to guarantee uniqueness.
    function onEnrollUserPressed() {
        initializeResultObjects();
        SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
        // Get a Session Token from the FaceTec SDK, then start the Enrollment.
        getSessionToken(function (sessionToken) {
            latestEnrollmentIdentifier = "browser_sample_app_" + SampleAppUtilities.generateUUId();
            latestProcessor = new EnrollmentProcessor(sessionToken, SampleApp);
        });
    }
    // Perform 3D to 3D Verification against the Enrollment previously performed.
    function onVerifyUserPressed() {
        initializeResultObjects();
        // For demonstration purposes, verify that we have an enrollmentIdentifier to Verify against.
        if (latestEnrollmentIdentifier.length === 0) {
            DeveloperStatusMessages.logAndDisplayMessage("Please enroll first before trying verification.");
        }
        else {
            SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
            // Get a Session Token from the FaceTec SDK, then start the 3D to 3D Matching.
            getSessionToken(function (sessionToken) {
                latestProcessor = new VerificationProcessor(sessionToken, SampleApp);
            });
        }
    }
    // Perform a 3D Liveness Check, then an ID Scan, then Match the 3D FaceMap to the ID Scan.
    function onPhotoIDMatchPressed() {
        initializeResultObjects();
        SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
        // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.  On Success, ID Scanning will start automatically.
        getSessionToken(function (sessionToken) {
            latestEnrollmentIdentifier = "browser_sample_app_" + SampleAppUtilities.generateUUId();
            latestProcessor = new PhotoIDMatchProcessor(sessionToken, SampleApp, orangeAccessToken);
        });
    }
    // Perform Photo ID Scan, generating a username each time to guarantee uniqueness.
    function onPhotoIDScanPressed() {
        initializeResultObjects();
        SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
        // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.  On Success, ID Scanning will start automatically.
        getSessionToken(function (sessionToken) {
            latestProcessor = new PhotoIDScanProcessor(sessionToken, SampleApp);
        });
    }

    // Orange Authentication - Login and get access token
    function onOrangeAuthenticationPressed() {
        updateInitStatus("Authenticating with Orange API...");

        if (!orangeAuthProcessor) {
            orangeAuthProcessor = new OrangeAuthenticationProcessor();
        }

        orangeAuthProcessor.authenticate(function (success, data) {
            if (success) {
                orangeAccessToken = data.accessToken;
                orangeSessionToken = data.sessionToken;
                updateInitStatus("Orange authentication successful!");
                DeveloperStatusMessages.displayMessage("Orange authentication completed successfully. Access token and session token received.");

                // Enable all FaceTec buttons after successful Orange authentication
                enableAllFaceTecButtons();

                console.log("Orange authentication data:", data);
            } else {
                updateInitStatus("Orange authentication failed");
                DeveloperStatusMessages.displayMessage("Orange authentication failed: " + (data.error || "Unknown error"));
                console.error("Orange authentication failed:", data);
            }
        });
    }

    // Orange Liveness Check using Orange session token
    function onOrangeLivenessCheckPressed() {
        if (!orangeSessionToken) {
            DeveloperStatusMessages.displayMessage("Please authenticate with Orange first.");
            return;
        }

        initializeResultObjects();
        SampleAppUtilities.fadeOutMainUIAndPrepareForSession();

        // Use Orange session token for FaceTec liveness check
        latestProcessor = new OrangeLivenessCheckProcessor(orangeSessionToken, Config.PublicFaceScanEncryptionKey, SampleApp);
        latestProcessor.process();
    }

    // Display Orange Photo ID Match results
    function displayOrangePhotoIDResults(orangeResponse) {
        if (!orangeResponse) {
            console.log("No Orange API response to display");
            return;
        }

        // Show the results container
        var resultsContainer = document.getElementById("results-container");
        var resultsContent = document.getElementById("results-content");

        if (!resultsContainer || !resultsContent) {
            console.error("Results container not found in HTML");
            return;
        }

        // Build HTML content for the results
        var html = '<div style="margin-bottom: 20px;">';

        // Success status
        html += '<div style="background-color: #d4edda; color: #155724; padding: 10px; border-radius: 5px; margin-bottom: 15px;">';
        html += '<strong>‚úÖ Photo ID Match ' + (orangeResponse.success ? 'Successful' : 'Failed') + '</strong>';
        html += '</div>';

        // Basic information
        html += '<div style="background-color: white; padding: 15px; border-radius: 5px; margin-bottom: 15px;">';
        html += '<h4 style="color: #000000; margin-top: 0;">üìä Basic Information</h4>';
        html += '<p style="color: #000000;"><strong>Match Level:</strong> ' + orangeResponse.matchLevel + '/5</p>';
        html += '<p style="color: #000000;"><strong>External Database Ref ID:</strong> ' + orangeResponse.externalDatabaseRefID + '</p>';
        html += '<p style="color: #000000;"><strong>Face Detection:</strong> ' + (orangeResponse.scannedIDPhotoFaceFoundWithMinimumQuality ? '‚úÖ Found' : '‚ùå Not Found') + '</p>';
        html += '</div>';

        // Document information
        if (orangeResponse.documentData) {
            try {
                var docData = JSON.parse(orangeResponse.documentData);
                html += '<div style="background-color: white; padding: 15px; border-radius: 5px; margin-bottom: 15px;">';
                html += '<h4 style="color: #000000; margin-top: 0;">üìÑ Document Information</h4>';
                html += '<p style="color: #000000;"><strong>Template:</strong> ' + docData.templateInfo.templateName + '</p>';
                html += '<p style="color: #000000;"><strong>Country:</strong> ' + docData.templateInfo.documentCountry + '</p>';
                html += '<p style="color: #000000;"><strong>Type:</strong> ' + docData.templateInfo.templateType + '</p>';
                html += '</div>';

                // MRZ Data
                if (docData.mrzValues && docData.mrzValues.groups) {
                    html += '<div style="background-color: white; padding: 15px; border-radius: 5px; margin-bottom: 15px;">';
                    html += '<h4 style="color: #000000; margin-top: 0;">üîç MRZ Data</h4>';
                    docData.mrzValues.groups.forEach(function (group) {
                        html += '<h5 style="color: #000000; margin-bottom: 5px;">' + group.groupFriendlyName + '</h5>';
                        html += '<div style="background-color: #f8f9fa; padding: 10px; border-radius: 3px; margin-top: 5px;">';
                        group.fields.forEach(function (field) {
                            var displayValue = field.value;
                            var displayLabel = field.fieldKey;

                            // Clean up field names for better display
                            if (displayLabel === 'fullName') displayLabel = 'Full Name';
                            else if (displayLabel === 'dateOfBirth') displayLabel = 'Date of Birth';
                            else if (displayLabel === 'firstName') displayLabel = 'First Name';
                            else if (displayLabel === 'idNumber') displayLabel = 'ID Number';
                            else if (displayLabel === 'idNumber2') displayLabel = 'ID Number (Secondary)';
                            else if (displayLabel === 'dateOfExpiration') displayLabel = 'Expiration Date';
                            else if (displayLabel === 'sex') displayLabel = 'Gender';
                            else if (displayLabel === 'mrzLine1') displayLabel = 'MRZ Line 1';
                            else if (displayLabel === 'mrzLine2') displayLabel = 'MRZ Line 2';
                            else if (displayLabel === 'mrzLine3') displayLabel = 'MRZ Line 3';

                            // Clean up MRZ values for better display
                            if (field.fieldKey.includes('mrzLine')) {
                                displayValue = '<code style="background-color: #e9ecef; padding: 2px 4px; border-radius: 2px; font-family: monospace; color: #000000;">' + field.value + '</code>';
                            }

                            html += '<div style="margin-bottom: 8px; color: #000000;"><strong>' + displayLabel + ':</strong> ' + displayValue + '</div>';
                        });
                        html += '</div>';
                    });
                    html += '</div>';
                }

                // Scanned Data
                if (docData.scannedValues && docData.scannedValues.groups) {
                    html += '<div style="background-color: white; padding: 15px; border-radius: 5px; margin-bottom: 15px;">';
                    html += '<h4 style="color: #000000; margin-top: 0;">üìù Scanned Data</h4>';
                    docData.scannedValues.groups.forEach(function (group) {
                        html += '<h5 style="color: #000000; margin-bottom: 5px;">' + group.groupFriendlyName + '</h5>';
                        html += '<div style="background-color: #f8f9fa; padding: 10px; border-radius: 3px; margin-top: 5px;">';
                        group.fields.forEach(function (field) {
                            var displayValue = field.value;
                            var displayLabel = field.fieldKey;

                            // Clean up field names for better display
                            if (displayLabel === 'fullName') displayLabel = 'Full Name';
                            else if (displayLabel === 'dateOfBirth') displayLabel = 'Date of Birth';
                            else if (displayLabel === 'firstName') displayLabel = 'First Name';
                            else if (displayLabel === 'givenName') displayLabel = 'Given Name';
                            else if (displayLabel === 'placeOfBirth') displayLabel = 'Place of Birth';
                            else if (displayLabel === 'idNumber') displayLabel = 'ID Number';
                            else if (displayLabel === 'idNumber2') displayLabel = 'ID Number (Secondary)';
                            else if (displayLabel === 'dateOfExpiration') displayLabel = 'Expiration Date';
                            else if (displayLabel === 'issuingAuthority') displayLabel = 'Issuing Authority';
                            else if (displayLabel === 'sex') displayLabel = 'Gender';
                            else if (displayLabel === 'address1') displayLabel = 'Address';
                            else if (displayLabel === 'customField1') displayLabel = 'Additional Info';
                            else if (displayLabel === 'mrzLine1') displayLabel = 'MRZ Line 1';
                            else if (displayLabel === 'mrzLine2') displayLabel = 'MRZ Line 2';
                            else if (displayLabel === 'mrzLine3') displayLabel = 'MRZ Line 3';

                            // Clean up MRZ values for better display
                            if (field.fieldKey.includes('mrzLine')) {
                                displayValue = '<code style="background-color: #e9ecef; padding: 2px 4px; border-radius: 2px; font-family: monospace; color: #000000;">' + field.value + '</code>';
                            }

                            html += '<div style="margin-bottom: 8px; color: #000000;"><strong>' + displayLabel + ':</strong> ' + displayValue + '</div>';
                        });
                        html += '</div>';
                    });
                    html += '</div>';
                }
            } catch (e) {
                console.error("Error parsing document data:", e);
                html += '<div style="background-color: #f8d7da; color: #721c24; padding: 10px; border-radius: 5px; margin-bottom: 15px;">';
                html += '<strong>‚ùå Error parsing document data</strong>';
                html += '</div>';
            }
        }

        // Security checks
        if (orangeResponse.idScanSecurityChecks) {
            html += '<div style="background-color: white; padding: 15px; border-radius: 5px; margin-bottom: 15px;">';
            html += '<h4 style="color: #000000; margin-top: 0;">üîí Security Checks</h4>';
            html += '<ul style="color: #000000;">';
            html += '<li><strong>Replay Check:</strong> ' + (orangeResponse.idScanSecurityChecks.replayCheckSucceeded ? '‚úÖ Passed' : '‚ùå Failed') + '</li>';
            html += '<li><strong>Session Token Check:</strong> ' + (orangeResponse.idScanSecurityChecks.sessionTokenCheckSucceeded ? '‚úÖ Passed' : '‚ùå Failed') + '</li>';
            html += '<li><strong>Front Audit Trail Check:</strong> ' + (orangeResponse.idScanSecurityChecks.frontAuditTrailVerificationCheckSucceeded ? '‚úÖ Passed' : '‚ùå Failed') + '</li>';
            html += '<li><strong>Back Audit Trail Check:</strong> ' + (orangeResponse.idScanSecurityChecks.backAuditTrailVerificationCheckSucceeded ? '‚úÖ Passed' : '‚ùå Failed') + '</li>';
            html += '</ul>';
            html += '</div>';
        }

        // Status information
        html += '<div style="background-color: white; padding: 15px; border-radius: 5px; margin-bottom: 15px;">';
        html += '<h4 style="color: #000000; margin-top: 0;">üìà Status Information</h4>';
        html += '<ul style="color: #000000;">';
        html += '<li><strong>Face on Document:</strong> ' + orangeResponse.faceOnDocumentStatusEnumInt + '</li>';
        html += '<li><strong>Text on Document:</strong> ' + orangeResponse.textOnDocumentStatusEnumInt + '</li>';
        html += '<li><strong>MRZ Status:</strong> ' + orangeResponse.mrzStatusEnumInt + '</li>';
        html += '<li><strong>Watermark & Hologram:</strong> ' + orangeResponse.watermarkAndHologramStatusEnumInt + '</li>';
        html += '<li><strong>Digital ID Spoof Status:</strong> ' + orangeResponse.digitalIDSpoofStatusEnumInt + '</li>';
        html += '<li><strong>Face Map Age Estimate:</strong> ' + orangeResponse.faceMapAgeEstimateV2GroupEnumInt + '</li>';
        html += '<li><strong>ID Scan Age Estimate:</strong> ' + orangeResponse.idScanAgeEstimateGroupV2EnumInt + '</li>';
        html += '</ul>';
        html += '</div>';

        // Server information
        if (orangeResponse.serverInfo) {
            html += '<div style="background-color: white; padding: 15px; border-radius: 5px; margin-bottom: 15px;">';
            html += '<h4 style="color: #000000; margin-top: 0;">üñ•Ô∏è Server Information</h4>';
            html += '<p style="color: #000000;"><strong>Core Server SDK Version:</strong> ' + orangeResponse.serverInfo.coreServerSDKVersion + '</p>';
            html += '<p style="color: #000000;"><strong>Server Type:</strong> ' + orangeResponse.serverInfo.type + '</p>';
            html += '<p style="color: #000000;"><strong>Server Mode:</strong> ' + orangeResponse.serverInfo.mode + '</p>';
            html += '</div>';
        }

        html += '</div>';

        // Update the results content and show the container
        resultsContent.innerHTML = html;
        resultsContainer.style.display = 'block';

        // Scroll to results
        resultsContainer.scrollIntoView({ behavior: 'smooth' });

        // Also log to console for debugging
        console.log("=== Orange Photo ID Match Results ===");
        console.log("Success:", orangeResponse.success);
        console.log("Match Level:", orangeResponse.matchLevel);
        console.log("External Database Ref ID:", orangeResponse.externalDatabaseRefID);
        console.log("Full response:", orangeResponse);

        // Display a simple status message
        DeveloperStatusMessages.displayMessage("‚úÖ Photo ID Match completed successfully! Results displayed above.");
    }

    // Show the final result with the Session Review Screen.
    var onComplete;
    onComplete = function (sessionResult, idScanResult, latestNetworkResponseStatus) {
        latestSessionResult = sessionResult;
        latestIDScanResult = idScanResult;
        if (latestProcessor.isSuccess()) {
            // Display Orange API results for Photo ID Match
            var orangeResponse = latestProcessor.getLatestOrangeAPIResponse();
            displayOrangePhotoIDResults(orangeResponse);
        }
        else {
            // Log result for unSuccess Sessions.
            DeveloperStatusMessages.logScanOncompleteResult(sessionResult, idScanResult);
            // Check for server offline
            if (isNetworkResponseServerIsOffline(latestNetworkResponseStatus) === true) {
                showAdditionalScreensServerIsDown();
                return;
            }
        }
        SampleAppUtilities.showMainUI();
    };
    // Check for server down status
    function isNetworkResponseServerIsOffline(networkResponseStatus) {
        return (networkResponseStatus >= 500);
    }
    // Set a new customization for FaceTec Browser SDK.
    function onDesignShowcasePressed() {
        ThemeHelpers.showNewTheme();
    }
    function onVocalGuidanceSettingsButtonPressed() {
        SampleAppUtilities.setVocalGuidanceMode();
    }
    // Display audit trail images captured from user's last FaceTec Browser SDK Session (if available).
    function onViewAuditTrailPressed() {
        SampleAppUtilities.showAuditTrailImages(latestSessionResult, latestIDScanResult);
    }
    var sessionTokenErrorHasBeenHandled = false;
    function onSessionTokenError(xhrStatus) {
        if (sessionTokenErrorHasBeenHandled === false) {
            sessionTokenErrorHasBeenHandled = true;
            if (xhrStatus !== undefined && isNetworkResponseServerIsOffline(xhrStatus)) {
                showAdditionalScreensServerIsDown();
            }
            else {
                onServerSessionTokenError();
            }
        }
    }
    // Get the Session Token from the Orange API
    function getSessionToken(sessionTokenCallback) {
        sessionTokenErrorHasBeenHandled = false;

        // Check if we have an access token from Orange authentication
        if (!orangeAccessToken) {
            console.error("No Orange access token available. Please authenticate first.");
            DeveloperStatusMessages.displayMessage("Please authenticate with Orange first by clicking 'üîê Orange Authentication' button.");
            onServerSessionTokenError();
            return;
        }

        console.log("Getting session token from Orange API...");

        // Create Orange authentication processor to get session token
        if (!orangeAuthProcessor) {
            orangeAuthProcessor = new OrangeAuthenticationProcessor();
        }

        // Get session token using the access token
        orangeAuthProcessor.getSessionToken(function (success, data) {
            if (success && data.sessionToken) {
                console.log("Successfully obtained session token from Orange API");
                sessionTokenCallback(data.sessionToken);
            } else {
                console.error("Failed to get session token from Orange API:", data);
                onServerSessionTokenError();
            }
        });
    }
    function showAdditionalScreensServerIsDown() {
        AdditionalScreens.showServerUpGradeView();
    }
    function onServerSessionTokenError() {
        SampleAppUtilities.handleErrorGettingServerSessionToken();
    }
    var getLatestEnrollmentIdentifier = function () {
        return latestEnrollmentIdentifier;
    };
    var clearLatestEnrollmentIdentifier = function () {
        latestEnrollmentIdentifier = "";
    };
    function exitAdditionalScreen() {
        AdditionalScreens.exitAdditionalScreen(SampleAppUtilities.showMainUI);
    }

    // Initialization screen helper functions
    function updateInitStatus(message) {
        var statusElement = document.getElementById("init-status");
        if (statusElement) {
            statusElement.textContent = message;
        }
    }

    function hideInitScreen() {
        var initScreen = document.getElementById("init-screen");
        var mainContainer = document.getElementById("main-container");

        if (initScreen) {
            initScreen.classList.add("fade-out");
            setTimeout(function () {
                initScreen.style.display = "none";
                if (mainContainer) {
                    mainContainer.style.display = "block";
                }
            }, 500);
        }
    }

    // Enable only Orange Authentication button initially
    function enableOrangeAuthenticationOnly() {
        // Disable all buttons first
        document.querySelectorAll("#controls > button").forEach(function (button) {
            button.disabled = true;
        });

        // Enable only Orange Authentication button
        var orangeAuthButton = document.getElementById("orange-auth-button");
        if (orangeAuthButton) {
            orangeAuthButton.disabled = false;
        }
    }

    // Enable all FaceTec buttons after Orange authentication
    function enableAllFaceTecButtons() {
        // Enable Orange Liveness Check button
        var orangeLivenessButton = document.getElementById("orange-liveness-button");
        if (orangeLivenessButton) {
            orangeLivenessButton.disabled = false;
        }

        // Enable all other FaceTec buttons
        SampleAppUtilities.enableControlButtons();
    }

    return {
        onLivenessCheckPressed: onLivenessCheckPressed,
        onEnrollUserPressed: onEnrollUserPressed,
        onVerifyUserPressed: onVerifyUserPressed,
        onPhotoIDMatchPressed: onPhotoIDMatchPressed,
        onPhotoIDScanPressed: onPhotoIDScanPressed,
        onDesignShowcasePressed: onDesignShowcasePressed,
        onOrangeAuthenticationPressed: onOrangeAuthenticationPressed,
        onOrangeLivenessCheckPressed: onOrangeLivenessCheckPressed,
        onComplete: onComplete,
        getLatestEnrollmentIdentifier: getLatestEnrollmentIdentifier,
        clearLatestEnrollmentIdentifier: clearLatestEnrollmentIdentifier,
        onVocalGuidanceSettingsButtonPressed: onVocalGuidanceSettingsButtonPressed,
        onViewAuditTrailPressed: onViewAuditTrailPressed,
        latestSessionResult: latestSessionResult,
        latestIDScanResult: latestIDScanResult
    };
})();
